[gd_resource type="VisualShader" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeExpression" id=1]
size = Vector2( 887, 611 )
expression = "vec4 Grid = vec4(0.0);
vec2 depth_flip = vec2(1.0,1.0);

float  Mask = texture(Grid_Frame, UV.xy+UV_Offset).a;
for (int i = 0; i < Samples; i++) {
	float i_normalized = float(i)/float(Samples);
	vec2 base_uv = UV+UV_Offset;
	vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
	vec2 ofs = base_uv - view_dir.xy / view_dir.z * (Spacing*float(i)*0.1);
	base_uv = ofs;
	vec3 GridMesh = texture(Grid_Frame, base_uv.xy).rgb*pow(-(float(i)/float(Samples)*1.0)+1.0,1.0);
	
	if (i == 0) {
		Grid.rgb += GridMesh*texture(Grid_Frame, base_uv.xy).a;
	} else {
		Grid.rgb += mix(vec3(0.0),GridMesh*texture(Grid_Frame, base_uv.xy).a,-Mask+1.0*texture(Grid_Frame, base_uv.xy).a);
	}
	Mask = min(Mask+texture(Grid_Frame, base_uv.xy).a,1.0);
}

vec3 Inside = clamp(mix(vec3(0.25),Grid.rgb,Mask),vec3(0.0),vec3(1.0));

COL = Inside+(texture(Glass, Ref_Uv.xy).rgb*Glass_Alpha);
"

[sub_resource type="VisualShaderNodeGlobalExpression" id=2]
size = Vector2( 412, 304 )
expression = "uniform int Samples : hint_range(1,10);
uniform float Spacing : hint_range(0.0,1.0);
uniform vec2 UV_Offset : hint_vec2;
uniform sampler2D Grid_Frame : hint_albedo;
uniform sampler2D Glass : hint_albedo;
uniform float Glass_Alpha : hint_range(0.0,1.0);

float burnF(float rgb1, float rgb2) {
	return 1.0 - (1.0 - rgb1) / rgb2;
}"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=4]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.7 ]

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=7]
uniform_name = "GlowPower"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;

uniform vec3 GlowPower;


// GlobalExpression:0
	uniform int Samples : hint_range(1,10);
	uniform float Spacing : hint_range(0.0,1.0);
	uniform vec2 UV_Offset : hint_vec2;
	uniform sampler2D Grid_Frame : hint_albedo;
	uniform sampler2D Glass : hint_albedo;
	uniform float Glass_Alpha : hint_range(0.0,1.0);
	
	float burnF(float rgb1, float rgb2) {
		return 1.0 - (1.0 - rgb1) / rgb2;
	}

void vertex() {
// Output:0

}

void fragment() {
// VectorUniform:9
	vec3 n_out9p0 = GlowPower;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Input:7
	vec3 n_out7p0 = VERTEX;

// VectorScalarMix:6
	float n_in6p2 = 0.70000;
	vec3 n_out6p0 = mix(n_out5p0, n_out7p0, n_in6p2);

// Expression:3
	vec3 n_out3p0;
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	{
		vec4 Grid = vec4(0.0);
		vec2 depth_flip = vec2(1.0,1.0);
		
		float  Mask = texture(Grid_Frame, UV.xy+UV_Offset).a;
		for (int i = 0; i < Samples; i++) {
			float i_normalized = float(i)/float(Samples);
			vec2 base_uv = UV+UV_Offset;
			vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
			vec2 ofs = base_uv - view_dir.xy / view_dir.z * (Spacing*float(i)*0.1);
			base_uv = ofs;
			vec3 GridMesh = texture(Grid_Frame, base_uv.xy).rgb*pow(-(float(i)/float(Samples)*1.0)+1.0,1.0);
			
			if (i == 0) {
				Grid.rgb += GridMesh*texture(Grid_Frame, base_uv.xy).a;
			} else {
				Grid.rgb += mix(vec3(0.0),GridMesh*texture(Grid_Frame, base_uv.xy).a,-Mask+1.0*texture(Grid_Frame, base_uv.xy).a);
			}
			Mask = min(Mask+texture(Grid_Frame, base_uv.xy).a,1.0);
		}
		
		vec3 Inside = clamp(mix(vec3(0.25),Grid.rgb,Mask),vec3(0.0),vec3(1.0));
		
		n_out3p0 = Inside+(texture(Glass, n_out6p0.xy).rgb*Glass_Alpha);
		
	}

// VectorOp:8
	vec3 n_out8p0 = n_out9p0 * n_out3p0;

// Output:0
	ALBEDO = n_out8p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -206, -300 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 640, 160 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( -540, 160 )
nodes/fragment/3/size = Vector2( 887, 611 )
nodes/fragment/3/input_ports = "0,1,Ref_Uv;"
nodes/fragment/3/output_ports = "0,1,COL;"
nodes/fragment/3/expression = "vec4 Grid = vec4(0.0);
vec2 depth_flip = vec2(1.0,1.0);

float  Mask = texture(Grid_Frame, UV.xy+UV_Offset).a;
for (int i = 0; i < Samples; i++) {
	float i_normalized = float(i)/float(Samples);
	vec2 base_uv = UV+UV_Offset;
	vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
	vec2 ofs = base_uv - view_dir.xy / view_dir.z * (Spacing*float(i)*0.1);
	base_uv = ofs;
	vec3 GridMesh = texture(Grid_Frame, base_uv.xy).rgb*pow(-(float(i)/float(Samples)*1.0)+1.0,1.0);
	
	if (i == 0) {
		Grid.rgb += GridMesh*texture(Grid_Frame, base_uv.xy).a;
	} else {
		Grid.rgb += mix(vec3(0.0),GridMesh*texture(Grid_Frame, base_uv.xy).a,-Mask+1.0*texture(Grid_Frame, base_uv.xy).a);
	}
	Mask = min(Mask+texture(Grid_Frame, base_uv.xy).a,1.0);
}

vec3 Inside = clamp(mix(vec3(0.25),Grid.rgb,Mask),vec3(0.0),vec3(1.0));

COL = Inside+(texture(Glass, Ref_Uv.xy).rgb*Glass_Alpha);
"
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -1040, 160 )
nodes/fragment/4/size = Vector2( 412, 304 )
nodes/fragment/4/input_ports = ""
nodes/fragment/4/output_ports = ""
nodes/fragment/4/expression = "uniform int Samples : hint_range(1,10);
uniform float Spacing : hint_range(0.0,1.0);
uniform vec2 UV_Offset : hint_vec2;
uniform sampler2D Grid_Frame : hint_albedo;
uniform sampler2D Glass : hint_albedo;
uniform float Glass_Alpha : hint_range(0.0,1.0);

float burnF(float rgb1, float rgb2) {
	return 1.0 - (1.0 - rgb1) / rgb2;
}"
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( -1080, 520 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( -860, 520 )
nodes/fragment/7/node = SubResource( 5 )
nodes/fragment/7/position = Vector2( -1080, 600 )
nodes/fragment/8/node = SubResource( 6 )
nodes/fragment/8/position = Vector2( 420, 160 )
nodes/fragment/9/node = SubResource( 7 )
nodes/fragment/9/position = Vector2( 420, 80 )
nodes/fragment/connections = PoolIntArray( 5, 0, 6, 0, 6, 0, 3, 0, 7, 0, 6, 1, 3, 0, 8, 1, 8, 0, 0, 0, 9, 0, 8, 0 )
