[gd_resource type="VisualShader" load_steps=3 format=2]

[sub_resource type="VisualShaderNodeExpression" id=1]
size = Vector2( 863, 453 )
expression = "vec4 Grid = vec4(0.0);
vec2 depth_flip = vec2(1.0,1.0);

for (int i = 0; i < Samples; i++) {
	float i_normalized = float(i)/float(Samples);
	vec2 base_uv = UV;
	vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
	vec2 ofs = base_uv - view_dir.xy / view_dir.z * (Spacing*float(i)*0.1);
	base_uv = ofs;
	vec3 GridMesh = texture(Grid_Frame, base_uv.xy).rgb*pow(-(float(i)/float(Samples)*1.5)+1.0,1.0);
	Grid.rgb += GridMesh;
}

COL = Grid.rgb;"

[sub_resource type="VisualShaderNodeGlobalExpression" id=2]
size = Vector2( 412, 304 )
expression = "uniform int Samples : hint_range(1,10);
uniform float Spacing : hint_range(0.0,5.0);
uniform sampler2D Grid_Frame : hint_albedo;
uniform sampler2D Glass : hint_albedo;
uniform sampler2D Layer1 : hint_albedo;
uniform sampler2D Layer2 : hint_albedo;

float burnF(float rgb1, float rgb2) {
	return 1.0 - (1.0 - rgb1) / rgb2;
}"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;



// GlobalExpression:0
	uniform int Samples : hint_range(1,10);
	uniform float Spacing : hint_range(0.0,5.0);
	uniform sampler2D Grid_Frame : hint_albedo;
	uniform sampler2D Glass : hint_albedo;
	uniform sampler2D Layer1 : hint_albedo;
	uniform sampler2D Layer2 : hint_albedo;
	
	float burnF(float rgb1, float rgb2) {
		return 1.0 - (1.0 - rgb1) / rgb2;
	}

void vertex() {
// Output:0

}

void fragment() {
// Expression:3
	vec3 n_out3p0;
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	{
		vec4 Grid = vec4(0.0);
		vec2 depth_flip = vec2(1.0,1.0);
		
		for (int i = 0; i < Samples; i++) {
			float i_normalized = float(i)/float(Samples);
			vec2 base_uv = UV;
			vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
			vec2 ofs = base_uv - view_dir.xy / view_dir.z * (Spacing*float(i)*0.1);
			base_uv = ofs;
			vec3 GridMesh = texture(Grid_Frame, base_uv.xy).rgb*pow(-(float(i)/float(Samples)*1.5)+1.0,1.0);
			Grid.rgb += GridMesh;
		}
		
		n_out3p0 = Grid.rgb;
	}

// Output:0
	ALBEDO = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1078, 161 )
flags/unshaded = true
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( -540, 160 )
nodes/fragment/3/size = Vector2( 863, 453 )
nodes/fragment/3/input_ports = ""
nodes/fragment/3/output_ports = "0,1,COL;"
nodes/fragment/3/expression = "vec4 Grid = vec4(0.0);
vec2 depth_flip = vec2(1.0,1.0);

for (int i = 0; i < Samples; i++) {
	float i_normalized = float(i)/float(Samples);
	vec2 base_uv = UV;
	vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
	vec2 ofs = base_uv - view_dir.xy / view_dir.z * (Spacing*float(i)*0.1);
	base_uv = ofs;
	vec3 GridMesh = texture(Grid_Frame, base_uv.xy).rgb*pow(-(float(i)/float(Samples)*1.5)+1.0,1.0);
	Grid.rgb += GridMesh;
}

COL = Grid.rgb;"
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -1000, 160 )
nodes/fragment/4/size = Vector2( 412, 304 )
nodes/fragment/4/input_ports = ""
nodes/fragment/4/output_ports = ""
nodes/fragment/4/expression = "uniform int Samples : hint_range(1,10);
uniform float Spacing : hint_range(0.0,5.0);
uniform sampler2D Grid_Frame : hint_albedo;
uniform sampler2D Glass : hint_albedo;
uniform sampler2D Layer1 : hint_albedo;
uniform sampler2D Layer2 : hint_albedo;

float burnF(float rgb1, float rgb2) {
	return 1.0 - (1.0 - rgb1) / rgb2;
}"
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0 )
