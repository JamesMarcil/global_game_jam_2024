[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeColorUniform" id=1]
uniform_name = "ColorBody2"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
uniform_name = "D"
texture_type = 1

[sub_resource type="VisualShaderNodeFresnel" id=5]
default_input_values = [ 2, false, 3, 2.0 ]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=6]

[sub_resource type="VisualShaderNodeColorUniform" id=7]
uniform_name = "ColorEdge"

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "M"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorScalarMix" id=9]

[sub_resource type="VisualShaderNodeVectorDecompose" id=10]

[sub_resource type="VisualShaderNodeColorUniform" id=11]
uniform_name = "ColorBody"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D D : hint_albedo;
uniform vec4 ColorBody : hint_color;
uniform vec4 ColorBody2 : hint_color;
uniform sampler2D M : hint_albedo;
uniform vec4 ColorEdge : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(D, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ColorUniform:9
	vec3 n_out9p0 = ColorBody.rgb;
	float n_out9p1 = ColorBody.a;

// ColorUniform:10
	vec3 n_out10p0 = ColorBody2.rgb;
	float n_out10p1 = ColorBody2.a;

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(M, UV.xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// VectorDecompose:8
	float n_out8p0 = n_out6p0.x;
	float n_out8p1 = n_out6p0.y;
	float n_out8p2 = n_out6p0.z;

// VectorScalarMix:11
	vec3 n_out11p0 = mix(n_out9p0, n_out10p0, n_out8p0);

// ScalarOp:12
	float n_out12p0 = n_out8p0 + n_out8p1;

// VectorScalarMix:7
	vec3 n_out7p0 = mix(n_out2p0, n_out11p0, n_out12p0);

// ColorUniform:5
	vec3 n_out5p0 = ColorEdge.rgb;
	float n_out5p1 = ColorEdge.a;

// Fresnel:3
	float n_in3p3 = 2.00000;
	float n_out3p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in3p3);

// VectorScalarMix:4
	vec3 n_out4p0 = mix(n_out7p0, n_out5p0, n_out3p0);

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1002, -75 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -680, 100 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( 100, 420 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( 180, 160 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( 180, 300 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -880, 340 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -220, 300 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( -880, 540 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -640, 300 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -640, 420 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -220, 420 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -640, 540 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 2, 4, 0, 0, 0, 5, 0, 4, 1, 2, 0, 7, 0, 7, 0, 4, 0, 6, 0, 8, 0, 10, 0, 11, 1, 9, 0, 11, 0, 11, 0, 7, 1, 8, 0, 12, 0, 8, 1, 12, 1, 12, 0, 7, 2, 8, 0, 11, 2 )
